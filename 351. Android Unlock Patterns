public class Solution {
    int result = 0;
    public int numberOfPatterns(int m, int n) {
        if (n < m){
            return 0;
        }
        
        int record[][] = new int[3][3];
        helper(n, m, -5, -5, record, 0);
        return result;
    }
    
    private void helper(int n, int m, int li, int lj, int[][] record, int count){
        
        if(count >= m && count <= n){
            result++;
        }
        if (count > n){
            return;
        }
        
        for (int i = 0; i < 3; i++){
            for (int j = 0; j < 3; j++){
                if (isValid(i, j, li, lj, record) && record[i][j] == 0){
                    record[i][j] = 1;
                    helper(n, m, i, j, record, count + 1);
                    record[i][j] = 0;
                }
            }
        }
    }
    private boolean isValid(int i, int j, int li, int lj, int[][] record){
        
        if (i == li && Math.abs(j - lj) == 2){
            if (record[i][1] == 0)  return false;
        }
        if (j == lj && Math.abs(i - li) == 2){
            if (record[1][j] == 0)  return false;
        }
        if (Math.abs(i - li) == Math.abs(j - lj) && Math.abs(i - li) == 2){
            if (record[1][1] == 0)  return false;
        }
        
        return true;
    }
}

tags: Backtracking
summary: Test each possibility and check if it is valid using function isValid. Time complexity O(9！).
