/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    List<Integer> inorder = new ArrayList<Integer>();
    public boolean isSymmetric(TreeNode root) {
        if (root == null || (root.left == null && root.right == null)){
            return true;
        }
        if (root.left == null || root.right == null){
            return false;
        }
        return isSymetricTree(root.left, root.right);
        
    }
    private boolean isSymetricTree(TreeNode node1, TreeNode node2){
        if (node1 == null && node2 == null){
            return true;
        }
        if (node1 == null || node2 == null){
            return false;
        }
        if ((node1.left == null && node2.right != null) || (node1.right == null && node2.left != null)){
            return false;
        }
        
        if (node1.val == node2.val){
            return isSymetricTree(node1.left, node2.right) && isSymetricTree(node1.right, node2.left);
        }
        return false;
    }
    
}

tags: Tree, DFS
summary: 
