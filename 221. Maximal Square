public class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0){
            return 0;
        }
        
        int row = matrix.length;
        int column = matrix[0].length;
        int dp[][] = new int[row + 1][column + 1];
        int max = 0;
        
        for (int i = 1; i <= row; i++){
            for (int j = 1; j <= column; j++){
                if (matrix[i - 1][j - 1] == '1'){
                    dp[i][j] = Math.min(Math.min(dp[i - 1][j - 1], dp[i][j - 1]), dp[i - 1][j]) + 1;
                    max = Math.max(dp[i][j], max);
                }
            }
        }
        
        return max * max;
    }
} 

tags: Dynamic Programming
summary: state (i, j) only relates to the state (i - 1, j - 1), (i - 1, j) and (i, j - 1). Get the minimum value of these 
         three values. Time Complexity O(mn)
