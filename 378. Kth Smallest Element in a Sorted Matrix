public class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        
        if (matrix == null || matrix.length == 0){
            return 0;
        }
        
        int n = matrix.length;
        int start = matrix[0][0];
        int end = matrix[n - 1][n - 1];
        
        while (start <= end){
            int mid = start + (end - start)/2;
            int count = Count(matrix, mid);
            if (count < k){
                start = mid + 1;
            }else{
                end = mid -1;
            }
        }
        
        return start;
        
    }
    
    private int Count(int[][] matrix, int target){
        int n = matrix.length;
        int i = n - 1;
        int j = 0;
        int count = 0;
        
        while (i >= 0 && j < n){
            if (matrix[i][j] > target){
                i--;
            }else{
                count += i + 1;
                j++;
            }
        }
        
        return count;
    }
}

tags: binary search
summary: Time complexity O(mlog(T)), m is the row number of matrix and T is the difference of the max and min value in the 
         matrix. Because the matrix is sorted. Compare the count number smaller mid to k and change the up and down bound.  
         In the last, the value will converge to the real number existing in the matrix.
