public class Solution {
    public int minCost(int[][] costs) {
        if (costs == null || costs.length == 0){
            return 0;
        }
        if (costs[0].length != 3){
            return 0;
        }
        
        int dp[][] = new int[costs.length][3];
        for (int i = 0; i < 3; i++){
            dp[0][i] = costs[0][i];
        }
        
        for (int i = 1; i < costs.length; i++){
            dp[i][0] = Math.min(dp[i - 1][1], dp[i - 1][2]) + costs[i][0];
            dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][2]) + costs[i][1];
            dp[i][2] = Math.min(dp[i - 1][0], dp[i - 1][1]) + costs[i][2];
        }
        
        return Math.min(dp[costs.length - 1][0], Math.min(dp[costs.length - 1][1], dp[costs.length - 1][2]));
    }
}

tags: Dynamic Programming
summary: There are only 3 colors used. ith state only relates to the state of i - 1. The only restriction is that the 
         adjacent house should have different color. Time complexity O(n).
