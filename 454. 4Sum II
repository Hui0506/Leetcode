public class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        
        for (int i = 0; i < A.length; i++){
            for (int j = 0; j < B.length; j++){
                int sum = A[i] + B[j];
                if (map.containsKey(sum)){
                    map.put(sum, map.get(sum) + 1);
                }else{
                    map.put(sum, 1);
                }
            }
        }
        
        int count = 0;
        for (int i = 0; i < C.length; i++){
            for (int j = 0; j < D.length; j++){
                int sum = C[i] + D[j];
                if (map.containsKey(-sum)){
                    count += map.get(-sum);
                }
            }
        } 
        return count;
    }
}

tages: HashMap
summary: Time complixity is O(n^2). Calculate the sum of two integers of the first two sets and store the sum in Hash Table.
         This process takes O(n^2) time. The next O(n^2) time is to calculate the remain two sets' sum and find their opposite  
         number stored in HashMap.
