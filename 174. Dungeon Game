public class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        
        if (dungeon == null || dungeon.length == 0){
            return 1;
        }
        
        int row = dungeon.length;
        int column = dungeon[0].length;
        int dp[][] = new int[row][column];
        
        dp[row - 1][column - 1] = Math.max(-dungeon[row - 1][column - 1], 0);
        
        for (int i = row - 2; i >= 0; i--){
            dp[i][column - 1] = Math.max(dp[i + 1][column - 1] - dungeon[i][column - 1], 0);
        }
        
        for (int j = column - 2; j >= 0; j--){
            dp[row - 1][j] = Math.max(dp[row - 1][j + 1] - dungeon[row - 1][j], 0);
        }
        
        for (int i = row - 2; i >= 0; i--){
            for (int j = column - 2; j >= 0; j--){
                dp[i][j] = Math.min(Math.max(dp[i][j + 1] - dungeon[i][j], 0),
                                    Math.max(dp[i + 1][j] - dungeon[i][j], 0));
            }
        }
        
        return dp[0][0] + 1;
       
    }
}

tags: dynamic programming
summary: Traverse from the last element to the first element. Time complexity O(n^2). dp matrix means the minumum hp needed to  
         reach dungeon[i][j].
