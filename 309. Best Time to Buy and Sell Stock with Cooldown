public class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length <= 1){
            return 0;
        }
        
        int b0 = -prices[0], b1 = b0;
        int s0 = 0, s1 = 0, s2 = 0;
        
        for (int price : prices){
            b0 = Math.max(b1, s2 - price);
            s0 = Math.max(s1, b1 + price);
            b1 = b0;
            s2 = s1;
            s1 = s0;
        }
        return s0;
    }
}

tags: Dynamic Programming   
summary: Array S means the max profit which last transaction is sold. Array B means the max profit which last transaction 
         is bought. At the time of i'th day. S[i] can be transformed from S[i - 1] and B[i - 1]. B[i] can be transformed from
         S[i - 2] and B[i - 1]. S[i - 2] is because of the coolday. To save the space complexity, give up the array because 
         that current state only relates to state i - 1 and i - 2. Time complexity is O(n).
