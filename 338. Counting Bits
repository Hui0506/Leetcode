public class Solution {
    public int[] countBits(int num) {
        
        num++;
        if (num <= 0){
            return new int[1];
        }
        int bit[] = new int[num];
        bit[0] = 0;
        
        for (int i = 1; i < num; i++){
            if (i % 2 == 1){
                bit[i] = bit[i - 1] + 1;
            }else{
                bit[i] = bit[i >> 1];
            }
        }
        
        return bit;
    }
}

tags: Dynamic Programming
summary: In the form of binary format. Number of 1s depends on whether the target number is odd or even. If it is odd, just
         increas 1 from the last even number. If it is an even, number of 1s is same as the number/2. Time complexity O(n).
